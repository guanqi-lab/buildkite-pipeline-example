name: CICD - Build and Deploy Docker Image

on:
  push:
    branches: [ "main", "dev" ]  # 支持 main 和 dev 分支
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-push-and-dispatch:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 登录 GHCR
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. 获取 Git 元数据
      - name: Get Git metadata
        id: git_vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 4. 提取 Docker 元数据
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 分支推送格式: {日期}.{分支名}.{commit_id}
            type=raw,value={{date 'YYYYMMDD'}}.{{branch}}.${{ steps.git_vars.outputs.sha_short }},event=branch
            # 标签推送格式: {日期}.{标签}.{commit_id}  
            type=raw,value={{date 'YYYYMMDD'}}.{{tag}}.${{ steps.git_vars.outputs.sha_short }},event=tag

      # 5. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trigger-buildkite-deployment:
    needs: build-push-and-dispatch
    runs-on: ubuntu-latest
    steps:
      # 重新检出代码以获取 Git 信息
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 获取 commit 信息用于 Buildkite
      - name: Get commit info for Buildkite
        id: commit_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          echo "buildkite_message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "构建的 Buildkite 消息: ${COMMIT_MESSAGE}"

      # 触发 Buildkite Pipeline
      - name: Trigger Buildkite Deployment Pipeline
        uses: "buildkite/trigger-pipeline-action@v2.3.0"
        with:
          buildkite_api_access_token: ${{ secrets.BUILDKITE_API_TOKEN }}
          pipeline: "${{ secrets.BUILDKITE_ORGANIZATION_SLUG }}/${{ secrets.BUILDKITE_PIPELINE_SLUG }}"
          commit: ${{ github.sha }}
          branch: ${{ github.ref_name }}
          message: ${{ steps.commit_info.outputs.buildkite_message }}
          # 只传递必要的镜像信息，环境判断由 Buildkite 处理
          build_env_vars: |
            {
              "DOCKER_IMAGE_TAG": "${{ needs.build-push-and-dispatch.outputs.image_tag }}"
            }