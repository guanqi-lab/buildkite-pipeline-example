name: CICD - Build and Deploy Docker Image

on:
  push:
    branches: [ "main", "dev" ]  # 支持多环境部署
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-push-and-dispatch:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 登录 GHCR
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. 手动获取短 Commit ID 和 Commit Message
      - name: Get Git metadata
        id: git_vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          # 将 commit message 中的换行符等特殊字符进行 URL 编码，以安全地传递
          echo "commit_message=$(git log -1 --pretty=%s | sed -z 's/\n/\\n/g' | jq -s -R -r @uri)" >> $GITHUB_OUTPUT

      # 4. 提取 Docker 元数据
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 规则1: 当事件是推送到一个分支时
            # 格式: {日期}.{分支名}.{commit_id}
            type=ref,value={{date 'YYYYMMDD'}}.{{tag}}.${{ steps.git_vars.outputs.sha_short }},event=tag

            # 规则2: 当事件是推送一个 Git 标签时
            # 格式: {日期}.{TAG号}.{commit_id}
            type=raw,value={{date 'YYYYMMDD'}}.{{branch}}.${{ steps.git_vars.outputs.sha_short }},event=branch,priority=200
      # 5. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  trigger-buildkite-deployment:
    needs: build-push-and-dispatch
    runs-on: ubuntu-latest
    steps:
      # 重新检出代码以获取 Git 信息
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 获取 commit 信息用于 Buildkite 消息
      - name: Get commit info for Buildkite
        id: commit_info
        run: |
          # 获取 commit 作者
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          # 获取 commit 信息，处理特殊字符
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          # 构建 Buildkite 消息
          BUILDKITE_MESSAGE="${COMMIT_MESSAGE}"
          echo "buildkite_message=${BUILDKITE_MESSAGE}" >> $GITHUB_OUTPUT
          echo "构建的 Buildkite 消息: ${BUILDKITE_MESSAGE}"

      # 环境检测和配置
      - name: Detect Environment
        id: env_detect
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "env_prefix=PROD" >> $GITHUB_OUTPUT
            echo "env_emoji=🚀" >> $GITHUB_OUTPUT
            echo "env_name=生产环境" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "environment=test" >> $GITHUB_OUTPUT
            echo "env_prefix=TEST" >> $GITHUB_OUTPUT
            echo "env_emoji=🧪" >> $GITHUB_OUTPUT
            echo "env_name=测试环境" >> $GITHUB_OUTPUT
          else
            echo "environment=unknown" >> $GITHUB_OUTPUT
            echo "env_prefix=DEV" >> $GITHUB_OUTPUT
            echo "env_emoji=❓" >> $GITHUB_OUTPUT
            echo "env_name=未知环境" >> $GITHUB_OUTPUT
          fi
          echo "检测到环境: $(cat $GITHUB_OUTPUT | grep environment= | cut -d= -f2)"

      - name: Trigger Buildkite Deployment Pipeline
        uses: "buildkite/trigger-pipeline-action@v2.3.0"
        with:
          # 必需：拥有 write_builds 权限的 Buildkite API 令牌
          buildkite_api_access_token: ${{ secrets.BUILDKITE_API_TOKEN }}

          # 必需：您的 Buildkite 流水线 slug
          pipeline: "guanqi/unipay-deploy"

          # 将当前提交的 SHA 传递给 Buildkite
          commit: ${{ github.sha }}

          # 确保 Buildkite 在正确的 git 分支上操作
          branch: ${{ github.ref_name }}

          # 使用实际的 commit 信息作为构建消息
          message: ${{ steps.commit_info.outputs.buildkite_message }}

          # 关键：将构建好的镜像标签作为环境变量传递给 Buildkite 作业
          build_env_vars: |
            {
              "DOCKER_IMAGE_TAG": "${{ needs.build-push-and-dispatch.outputs.image_tag }}",
              "GITHUB_REPOSITORY": "${{ github.repository }}",
              "DEPLOY_ENVIRONMENT": "${{ steps.env_detect.outputs.environment }}",
              "ENV_PREFIX": "${{ steps.env_detect.outputs.env_prefix }}",
              "ENV_EMOJI": "${{ steps.env_detect.outputs.env_emoji }}",
              "ENV_NAME": "${{ steps.env_detect.outputs.env_name }}"
            }