name: CICD - Build and Deploy Docker Image

on:
  push:
    branches: [ "main", "dev" ]  # 支持 main 和 dev 分支
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-push-and-dispatch:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_tag_single: ${{ steps.extract_single_tag.outputs.single_tag }}
    permissions:
      contents: read
      packages: write

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 登录 GHCR
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. 获取 Git 元数据
      - name: Get Git metadata
        id: git_vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # 4. 提取 Docker 元数据
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # 分支推送格式: {日期}.{分支名}.{commit_id}
            type=raw,value={{date 'YYYYMMDD'}}.{{branch}}.${{ steps.git_vars.outputs.sha_short }},event=branch
            # 标签推送格式: {日期}.{标签}.{commit_id}  
            type=raw,value={{date 'YYYYMMDD'}}.{{tag}}.${{ steps.git_vars.outputs.sha_short }},event=tag

      # 5. 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 6. 提取单个镜像标签用于 Buildkite
      - name: Extract single image tag
        id: extract_single_tag
        run: |
          # 从多行标签中提取第一个标签
          SINGLE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "single_tag=${SINGLE_TAG}" >> $GITHUB_OUTPUT
          echo "提取的单个标签: ${SINGLE_TAG}"

  trigger-buildkite-deployment:
    needs: build-push-and-dispatch
    runs-on: ubuntu-latest
    steps:
      # 重新检出代码以获取 Git 信息
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 获取 commit 信息用于 Buildkite
      - name: Get commit info for Buildkite
        id: commit_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
          echo "buildkite_message=${COMMIT_MESSAGE}" >> $GITHUB_OUTPUT
          echo "构建的 Buildkite 消息: ${COMMIT_MESSAGE}"

      # 调试：显示将要使用的配置
      - name: Debug Buildkite configuration
        run: |
          echo "=== Buildkite 调试信息 ==="
          echo "Pipeline: ${{ secrets.BUILDKITE_ORGANIZATION_SLUG }}/${{ secrets.BUILDKITE_PIPELINE_SLUG }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Message: ${{ steps.commit_info.outputs.buildkite_message }}"
          echo "Image Tag: ${{ needs.build-push-and-dispatch.outputs.image_tag_single }}"
          
          # 验证 secrets 是否存在（不显示实际值）
          if [[ -n "${{ secrets.BUILDKITE_API_TOKEN }}" ]]; then
            echo "✓ BUILDKITE_API_TOKEN: 已设置"
          else
            echo "✗ BUILDKITE_API_TOKEN: 未设置"
          fi
          
          if [[ -n "${{ secrets.BUILDKITE_ORGANIZATION_SLUG }}" ]]; then
            echo "✓ BUILDKITE_ORGANIZATION_SLUG: 已设置"
          else
            echo "✗ BUILDKITE_ORGANIZATION_SLUG: 未设置"
          fi
          
          if [[ -n "${{ secrets.BUILDKITE_PIPELINE_SLUG }}" ]]; then
            echo "✓ BUILDKITE_PIPELINE_SLUG: 已设置"
          else
            echo "✗ BUILDKITE_PIPELINE_SLUG: 未设置"
          fi

      # 加载配置文件
      - name: Load Configuration
        id: load_config
        run: |
          echo "=== 加载配置文件 ==="
          
          # 安装 yq 用于解析 YAML
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          
          CONFIG_FILE=".github/workflows/config.yml"
          if [[ ! -f "$CONFIG_FILE" ]]; then
            echo "❌ 配置文件不存在: $CONFIG_FILE"
            exit 1
          fi
          
          echo "✓ 成功加载配置文件: $CONFIG_FILE"
          
          # 读取通用配置
          CONFIG_KEYS=$(yq '.config_management.config_keys | join(",")' "$CONFIG_FILE")
          CONFIG_OUTPUT_FILE=$(yq '.config_management.config_output_file' "$CONFIG_FILE")
          DEPLOY_SCRIPT=$(yq '.deployment.custom_deploy_script' "$CONFIG_FILE")
          DEPLOY_TIMEOUT=$(yq '.deployment.timeout' "$CONFIG_FILE")
          
          echo "配置键: $CONFIG_KEYS"
          echo "配置输出文件: $CONFIG_OUTPUT_FILE"  
          echo "部署脚本: $DEPLOY_SCRIPT"
          echo "部署超时: $DEPLOY_TIMEOUT"
          
          # 输出配置供后续步骤使用
          echo "config_keys=${CONFIG_KEYS}" >> $GITHUB_OUTPUT
          echo "config_output_file=${CONFIG_OUTPUT_FILE}" >> $GITHUB_OUTPUT
          echo "deploy_script=${DEPLOY_SCRIPT}" >> $GITHUB_OUTPUT
          echo "deploy_timeout=${DEPLOY_TIMEOUT}" >> $GITHUB_OUTPUT
          echo "配置文件加载完成"

      # 环境路由决策 - 根据分支和配置文件确定环境和队列
      - name: Environment Routing  
        id: env_routing
        run: |
          echo "=== 环境路由决策 ==="
          
          CONFIG_FILE=".github/workflows/config.yml"
          CURRENT_BRANCH="${{ github.ref_name }}"
          
          echo "当前分支: $CURRENT_BRANCH"
          
          # 从配置文件中读取分支对应的环境
          if [[ "$CURRENT_BRANCH" == "main" ]]; then
            DEPLOY_ENVIRONMENT="production"
          elif [[ "$CURRENT_BRANCH" == "dev" ]]; then
            DEPLOY_ENVIRONMENT="test"
          else
            echo "❌ 不支持的分支: $CURRENT_BRANCH"
            echo "仅支持 main 分支(生产环境) 和 dev 分支(测试环境)"
            exit 1
          fi
          
          echo "目标部署环境: $DEPLOY_ENVIRONMENT"
          
          # 从配置文件读取环境特定配置
          AGENT_QUEUE=$(yq ".environments.$DEPLOY_ENVIRONMENT.queue" "$CONFIG_FILE")
          CONFIG_PREFIX=$(yq ".environments.$DEPLOY_ENVIRONMENT.config_prefix" "$CONFIG_FILE")
          
          if [[ "$AGENT_QUEUE" == "null" || "$CONFIG_PREFIX" == "null" ]]; then
            echo "❌ 配置文件中缺少环境配置: $DEPLOY_ENVIRONMENT"
            echo "请检查配置文件: $CONFIG_FILE"
            exit 1
          fi
          
          echo "目标环境: ${DEPLOY_ENVIRONMENT}"
          echo "Agent队列: ${AGENT_QUEUE}"
          echo "配置前缀: ${CONFIG_PREFIX}"
          
          # 输出环境变量供后续步骤使用
          echo "deploy_environment=${DEPLOY_ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "agent_queue=${AGENT_QUEUE}" >> $GITHUB_OUTPUT  
          echo "config_prefix=${CONFIG_PREFIX}" >> $GITHUB_OUTPUT
          echo "环境路由配置完成"

      # 触发 Buildkite Pipeline
      - name: Trigger Buildkite Deployment Pipeline
        uses: "buildkite/trigger-pipeline-action@v2.3.0"
        with:
          buildkite_api_access_token: ${{ secrets.BUILDKITE_API_TOKEN }}
          pipeline: "${{ secrets.BUILDKITE_ORGANIZATION_SLUG }}/${{ secrets.BUILDKITE_PIPELINE_SLUG }}"
          commit: ${{ github.sha }}
          branch: ${{ github.ref_name }}
          message: ${{ steps.commit_info.outputs.buildkite_message }}
          # 传递环境信息和配置到 Buildkite
          build_env_vars: |
            {
              "DOCKER_IMAGE_TAG": "${{ needs.build-push-and-dispatch.outputs.image_tag_single }}",
              "DEPLOY_ENVIRONMENT": "${{ steps.env_routing.outputs.deploy_environment }}",
              "CONFIG_PREFIX": "${{ steps.env_routing.outputs.config_prefix }}",
              "AGENT_QUEUE": "${{ steps.env_routing.outputs.agent_queue }}",
              "CONFIG_KEYS": "${{ steps.load_config.outputs.config_keys }}",
              "CONFIG_OUTPUT_FILE": "${{ steps.load_config.outputs.config_output_file }}",
              "DEPLOY_SCRIPT": "${{ steps.load_config.outputs.deploy_script }}",
              "DEPLOY_TIMEOUT": "${{ steps.load_config.outputs.deploy_timeout }}",
              "GITHUB_REPOSITORY": "${{ github.repository }}",
              "GITHUB_ACTOR": "${{ github.actor }}",
              "GITHUB_RUN_ID": "${{ github.run_id }}",
              "GITHUB_RUN_NUMBER": "${{ github.run_number }}"
            }
          build_meta_data: |
            {
              "deploy_environment": "${{ steps.env_routing.outputs.deploy_environment }}",
              "config_prefix": "${{ steps.env_routing.outputs.config_prefix }}",
              "agent_queue": "${{ steps.env_routing.outputs.agent_queue }}",
              "config_keys": "${{ steps.load_config.outputs.config_keys }}",
              "config_output_file": "${{ steps.load_config.outputs.config_output_file }}",
              "deploy_script": "${{ steps.load_config.outputs.deploy_script }}",
              "deploy_timeout": "${{ steps.load_config.outputs.deploy_timeout }}",
              "github_repository": "${{ github.repository }}",
              "github_actor": "${{ github.actor }}",
              "github_run_id": "${{ github.run_id }}",
              "github_run_number": "${{ github.run_number }}"
            }