#.buildkite/pipeline.yml
# 该文件定义了在 Buildkite Agent 上执行的完整部署流程。

# 定义流水线级别的环境变量，这些变量对所有步骤都可用。
env:
  # 您的 GitHub 用户名，用于 Docker 登录。
  # 建议在此处设置或在集群/Agent级别设置。
  GITHUB_USERNAME: "guanqi-lab"
  # 您的 GitHub 仓库名称，用于构造镜像URL。
  GITHUB_REPO_NAME: "buildkite-pipeline-example"

steps:
  # 步骤零：环境检测和配置
  - label: ":gear: Environment Detection"
    key: "env-detect"
    command: |
      echo "--- :mag: 检测部署环境"
      echo "分支: ${BUILDKITE_BRANCH}"
      echo "环境: ${DEPLOY_ENVIRONMENT}"
      echo "前缀: ${ENV_PREFIX}"
      echo "标识: ${ENV_EMOJI} ${ENV_NAME}"
      
      # 设置环境变量供后续步骤使用
      buildkite-agent meta-data set "deploy_environment" "${DEPLOY_ENVIRONMENT:-production}"
      buildkite-agent meta-data set "env_prefix" "${ENV_PREFIX:-PROD}"
      buildkite-agent meta-data set "env_emoji" "${ENV_EMOJI:-🚀}"
      buildkite-agent meta-data set "env_name" "${ENV_NAME:-生产环境}"
      
      echo "✅ 环境信息已保存到 meta-data"

  # 等待环境检测完成
  - wait

  # 步骤一：认证并拉取 Docker 镜像
  - label: ":docker: Pull Image"
    key: "pull-image"
    command: "scripts/pull_image.sh"

  # 等待步骤：确保上一步成功完成后再继续
  - wait

  # 步骤二：执行部署
  - label: ":rocket: Deploy Application"
    key: "deploy-app"
    command: "scripts/deploy.sh"
    # 定义依赖关系，确保此步骤在 "pull-image" 成功后才运行
    depends_on: "pull-image"

  # 等待部署步骤完成（无论成功失败）
  - wait: ~
    continue_on_failure: true

  # 步骤三：发送通知（无论部署成功失败都会执行）
  - label: ":lark: Send Notification"
    key: "notify-result"
    command: "scripts/notify_lark.sh"
    depends_on: 
      - "deploy-app"
    # 允许在前面步骤失败时仍然执行通知
    soft_fail: true